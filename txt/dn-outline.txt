#  -*- org -*- 

Microsoft .NET 将从根本上改变我们考虑和使用计算设备的方式。当前，服务器和客户端
桌面这两个概念是计算技术的最重要的概念。Microsoft .NET 将此模型扩展为松耦合服务
的丰富的、分布式计算范例。不管是在服务器、PC、掌上电脑还是在其他智能设备上，只
要是最适于进行处理，就会进行处理，而不必按照传统方式对桌面和服务器加以区分。这
是新一代智能设备的智能计算。

Microsoft .NET 计算模型以不同方式影响企业、个人和开发人员。对于个人：这些变化将
产生极其个性化的、集成的计算体验。对于企业和开发人员：它将改变企业和开发人员生
成软件和销售产品的方式，使 IT 成为企业成功的重要因素并引入新的业务模式。

尽管 Microsoft .NET 在计算技术领域带来了一些根本性变化，但是很多内容仍然保持不变：

    * 个人在 .NET 体验中仍将使用他们所熟悉的界面，如 Microsoft Office。这减少了
      重新培训的费用，意味着个人可以立即使用支持 .NET 的软件。

    * 硬件仍将运行一些操作系统，如 Microsoft Windows、UNIX、Windows CE 和
      PalmOS。实际上，.NET 在降低开发负担的同时增加了软件可以运行的平台数。因为
      XML Web services 只通过 XML 与设备进行通讯，所以任何智能设备都可以使用
      XML Web services。

    * 开发人员仍将使用他们首选的编程语言。借助 .NET 框架的公共语言运行库，.NET
      平台使各种 XML Web services 可以交互操作，而不管其源语言的不同。
      Microsoft .NET 体验同样对源语言不置可否，您可以通过使用 Microsoft Visual
      Basic、Java，甚至是 COBOL 编写的 XML Web services 产生这些体验。这种中立
      性意味着无须为了利用 .NET 平台而丢弃和替换现有成果。

    * 无需替换旧式系统。某些 Microsoft .NET 产品是为了将现有成果轻松地集成到新
      的 .NET XML Web services 和 .NET 体验中而专门设计的。例如，Microsoft
      Host Integration Server 简化对大型机的访问；Microsoft BizTalk Server 管理
      业务流程的编排，包括对现有的系统和数据格式的处理，同时进行到 XML 的必需的
      自动化数据转换。

因此，这一下一代分布式计算技术建立在当前这一代计算技术的基础之上。正如我们所知
道的，Microsoft .NET 并不是软件应用程序的整批替换，而是将协作和互操作性的好处带
给我们现有的技术“孤岛”的自然演变。


* 定义 .NET 的最简单方法

Sanjay Parthasarathy，平台战略副总裁，Microsoft Corporation
2000年 12 月 21 日

** 分布式计算

定义 .NET 最好的方式就是想一想 .NET 要做什么。Microsoft 认为向分布式计算的转变
正在悄悄地进行着。在过去的几年中，人们一直在铺设宽带电缆，使带宽的限制比过去要
小得多。根据摩尔定律效应，每 18 个月处理能力翻一番，价格降低一半，现在您首次可
以选择进行真正的分布式计算：因为带宽已经不那么昂贵，您可以在任何最佳地点进行处
理。

当今已经有很多这种分布式应用程序的例子。Napster 就是一个使用胖客户端与计算机群
集中的目录服务进行对话的应用程序，它把网络上的所有参与的计算机都当作服务器。另
一个分布式应用程序的例子是即时消息，胖客户端与计算机群集中一个伙伴列表对话，同
时还可以与网络中的其他胖客户端 - Instant Messenger 和 Windows 进行通信。

因此，.NET 的目的正是要加速产生下一代分布式计算的过程。

** 三个杠杆

我们认为可以拉动三个杠杆，以使下一代分布式计算尽可能快地发生。

  + Web 服务：第一个杠杆是一切都要成为 Web 服务。这适用于网络中的两种东西：软件
    和资源（如存储）。

  + 聚合与集成：第二个需要拉动的杠杆是，一旦您拥有了这些 Web 服务，就需要以一种
    非常简单和容易的方式将它们聚合与集成起来。

  + 简单而令人神往的用户体验：加速分布式计算的第三个杠杆是，需要有简单和令人神
    往的消费者或者最终用户体验。

因此我们认为这三个杠杆是加速向分布式计算转移的必要条件：

  * 一切都要成为 Web 服务；
  * 聚合与集成 Web 服务的能力；
  * 向最终用户提供简单而令人神往的体验的能力。

.NET 的目的正是致力于拉动这些杠杆，以加速向分布式计算的转移，为了正确地拉动这些
杠杆，我们正在做五项工作。

** 分五部分构建 .NET

*** 开发工具

我们做的第一项工作是：通过 .NET 框架和 Visual Studio 工具集，使编写 Web 服务尽
可能简单方便。我们认为，用于编写 Web 服务最好、最方便、最快并且最节约的方法是使
用 .NET 框架和 Visual Studio .NET 开发工具。

*** 服务器

我们做的第二项工作是：真正致力于 Web 服务聚合与集成，这恰恰是我们的 .NET 服务器
家族的用武之地。我们认为，这些服务器是用于聚合与集成 Web 服务最好、最简单、最方
便、最节约的方法。

可以从两个方面看待这些服务器。大家熟悉和喜爱的一组服务器是 Windows 2000、SQL
Server 2000、Exchange 2000，XML 管线内置于其核心。而 XML，正如您所知，可能是最
简单最大众化的集成 Web 服务的方法。第二类服务器是我们构建的专门服务器，如
BizTalk Server，它们提供更高级别和更灵活的聚合与集成。以 BizTalk Server 2000 为
例，它内置了一种叫作 XLANG 的语言，通过该语言您可以定义过程流、事务流和协定，也
可以跨异类环境进行相当深层次的集成。这就是 .NET 的第二部分：用以加速 Web 服务聚
合与集成的服务器集。

*** 基础服务

我们的第三项工作是：使最终消费者的体验简单而令人神往，为此我们正在构建一个
.NET 构造块服务集。几乎每个人，每当他遇到多个站点和多个应用程序时，都遇到过这样
的情况：需要登录这些站点和应用程序；我们正在创建一个诸如标识、通知和系统化存储
之类的小服务集，利用这些服务，消费者和用户从一个服务转向另一个服务，从一个应用
程序转到另一个应用程序，甚至从一种环境转向另一个环境都将非常容易。这种简单性在
分布式计算的世界里是绝对必要的。

这些 .NET 构造块服务对开发人员也有巨大的益处：它们与以前的 Windows 中的内存管理
器和文件系统非常相似，当人们编写应用程序时，不需要每次都把内存管理器和文件系统
复制一遍。我们相信，开发人员将喜欢这些服务集成到计算机群集中，而且它们得到保证，
因此他们可以将精力集中投入到可以大大增值的事情上去。.NET 构造块服务是 .NET 的第
三部分。

*** 设备

第四部分致力于最终用户的体验，通过一套我们正在创建的客户端和设备软件，将特别带
给用户令人神往的体验。首先，.NET 假设您拥有了一个设备家族，我们正是要创建许多设
备软件，以使人们可以使用相互取长补短的设备家族。我们将在设备软件中做一些有趣的
事情，以使您尽可能体验到令人神往的效果。一方面，您将拥有我们为游戏机创建的设备
软件，另一方面，您也将拥有我们为 PC 创建的设备软件，同时我们还致力于创建用于从
电话到 PDA 到其他如掌上 PC 之类的各种设备的软件。

*** 用户体验

在拉动简单而令人神往的用户体验这一杠杆方面，我们的最后一项工作，是正在实实在在
地创建一些非常有针对性的用户体验，把 Web 服务集合到一起，并且集成很多功能，以提
供非常有针对性的体验。我们正在创建

    * 面向消费者的 MSN
    * 面向小型企业的 bCentral
    * 面向知识工作者的 Office
    * 面向开发人员的 Visual Studio .NET。

*** .NET 平台

总而言之，这五部分就是 .NET 的全部内容。您已经了解了

    * .NET 框架和 Visual Studio .NET 工具；
    * 服务器；
    * .NET 构造块服务；
    * 设备软件；
    * 有针对性的用户体验。

我把前四者组合到一起称之为 .NET 平台，而最后一个则是建在该平台之上的应用。

** 小结

请您用 1-3-5 公式来看待 .NET。

.NET 要做什么？它要加速向分布式计算的转移。

.NET 要做什么？它要拉动三个杠杆，分别是

    * 一切都要成为 Web 服务；
    * 聚合与集成 Web 服务以及
    * 提供简单而令人神往的用户体验。

Microsoft 正在做哪些与 .NET 有关的工作？针对这些问题我们正在做五项工作：

    * 工具，
    * 服务器，
    * .NET 构造块服务，
    * 设备软件，以及
    * 用户体验。
